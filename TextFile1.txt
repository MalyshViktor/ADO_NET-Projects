Технология доступа к данным ADO .NET
Средства языка программирования, позволяющие
 - передавать запросы к БД (СУБД)
 - принимать и обрабатывать результаты запросов
 = унифицировать средства, делать независимыми от СУБД

1. БД и подключение
1.1. Создаем БД
1.2. Узнаем строку подключения (из свойств БД / 
      из СУБД)
Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\Users\samoylenko_d\source\repos\ADO_NET\Database1.mdf;Integrated Security=True
1.3. Устанавливаем пакет NuGet (System.Data.SqlClient)
1.4. using System.Data.SqlClient;
1.5. создаем объект-подключение 
     SqlConnection connection = new SqlConnection(
       строка подключения
     )
     ! в ADO создание объекта 
     не открывает подключение автоматически

1.6. открываем подключение в блоке try-catch

2. Выполнение запросов
2.0. Требуется открытое подключение (см. п. 1)
2.1. Для запросов используется SqlCommand
      поле CommandText содержит текст запроса
2.2. Выполнение команды: зависит от DDL/DML
      ExecuteNonQuery() - запросы без возврата данных
      ExecuteScalar() - с возвратом одного значения
      ExecuteReader() - с возвратом таблицы
    Рекомендуется:
      закрывать команды после выполнения (использовать
      блок using(){} )


Обеспечить блокировку кнопок, выполняющих запросы,
до установки подключения.
* Если в БД есть таблица, то не активировать кнопку
создания таблицы.
* Добавить кнопку отключения от БД

-----------------------
DB                            | DB
 DBMS (СУБД)                  |  DBMS
  |  | Console (SQL) Query    |       ADO
  |                           |         Program   
Console (Result) Table        |           UI

-----------------------------------

2. Выполнение запросов
2.2. Продолжение
 ExecuteReader() - с возвратом результата

 SqlDataReader result = cmd.ExecuteReader();

 result - объект, отвечающий за передачу данных
 из СУБД в программу.
 Поскольку в СУБД данные в табличном виде, а
 в ЯП подходящих типов данных нет, то передача
 происходит по следующему принципу
 1. Запрашивается одна строка таблицы (Read/Next/Fetch)
 2. Данные из этой строки "загружаются" в result
     и извлекаются из него при помощи Get-теров
 3. Повторяются пп.1-2 пока есть строки для загрузки
 4. Закрывают result, т.к. он "занимает" подключение
     и другие команды не могут выполняться.

Особенности
Get-теры могут обращаться как по индексу, так и по имени
 общей рекомендации нет,
 - если поля не именуются, то лучше по индексу
 - желательно перечислять поля (не использовать *)
Get-теры есть типизированные (GetString, GetDouble...)
 и обобщенный (GetValue типа object).
 Рекомендуется использовать типизированные
Проблема NULL:
 в C# не все типы допускают NULL, а в БД - все
 - Nullable<T> - шаблон, добавляющий NULL к множеству Т
 - каскадный Get-тер: 
    сначала GetValue
    проверяем, или это NULL
    затем типизированный Get-тер или конвертер

-------------------------
ORM (Object Reflection Mapping) - Отображение на объекты
Для ООП языков данные из таблиц представляются в виде
объектов одного класса

Задание:
добавить кнопку, выводящую данные из базы при помощи
ContextDb
* DataGridView - посмотреть самостоятельно
